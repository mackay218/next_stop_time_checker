{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clearOptions","elementId","console","log","targetElement","document","getElementById","optionArr","getElementsByTagName","length","i","remove","chooseOne","createElement","innerString","split","innerHTML","concat","selected","disabled","appendChild","populateDropDown","targetVal","targetText","forEach","item","newOption","value","getTodaysRoutes","axios","get","then","response","data","setState","routes","populateRouteDropDown","catch","error","alert","routesArr","state","handleRouteChange","event","target","routeNum","chosenRoute","getDirections","directions","getStops","populateDirectionDropDown","directionNum","Value","stops","populateStopDropDown","directionsArr","directionDropDown","handleDirectionChange","chosenDirection","stopsArr","handleStopChange","chosenStop","handleSubmit","preventDefault","handleResponse","responseDisplay","time","nextBusTrain","Actual","DepartureText","replace","moment","relativeTimeThreshold","DepartureTime","fromNow","substring","react_default","a","className","onSubmit","htmlFor","defaultValue","id","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SA0VeA,cAnVb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAkBRQ,aAAe,SAACC,GACdC,QAAQC,IAAI,kBAAmBF,GAE/B,IAAIG,EAAgBC,SAASC,eAAeL,GAExCM,EAAYH,EAAcI,qBAAqB,UAEnD,GAAID,EAAUE,OAAS,EAAG,CACxB,IAAK,IAAIC,EAAIH,EAAUE,OAAS,EAAGC,GAAK,EAAGA,IACzCN,EAAcO,OAAOJ,EAAUG,IAGjC,IAAIE,EAAYP,SAASQ,cAAc,UACnCC,EAAcb,EAAUc,MAAM,KAAK,GAEvCH,EAAUI,UAAV,UAAAC,OAAgCH,GAChCF,EAAUM,UAAW,EACrBN,EAAUO,UAAW,EAErBf,EAAcgB,YAAYR,KAtCZnB,EA4ClB4B,iBAAmB,SAACpB,EAAWM,EAAWe,EAAWC,GACnDrB,QAAQC,IAAI,sBAAuBF,EAAWM,EAAWe,EAAWC,GAEpE,IAAInB,EAAgBC,SAASC,eAAeL,GAExCM,EAAUE,OAAS,GAErBF,EAAUiB,QAAQ,SAACC,GACjB,IAAIC,EAAYrB,SAASQ,cAAc,UAEvCa,EAAUV,UAAYS,EAAKF,GAC3BG,EAAUC,MAAQF,EAAKH,GAEvBlB,EAAcgB,YAAYM,MAzDdjC,EA+DlBmC,gBAAkB,WAChB1B,QAAQC,IAAI,sBAGZE,SAASC,eAAe,qBAAqBa,UAAW,EAGxDd,SAASC,eAAe,gBAAgBa,UAAW,EAEnDU,IAAMC,IAAI,uBACPC,KAAK,SAACC,GACL9B,QAAQC,IAAI6B,EAASC,MAErBxC,EAAKyC,SAAS,CACZC,OAAQH,EAASC,OAInBxC,EAAK2C,0BAENC,MAAM,SAACC,GACNpC,QAAQC,IAAI,8BAA+BmC,GAC3CC,MAAM,8BAA+BD,MArFzB7C,EA0FlB2C,sBAAwB,WAEtB,IAAII,EAAY/C,EAAKgD,MAAMN,OAE3BjC,QAAQC,IAAI,2BAA4BqC,GAExC/C,EAAK4B,iBAAiB,gBAAiBmB,EAAW,QAAS,gBAhG3C/C,EAqGlBiD,kBAAoB,SAACC,GACnBzC,QAAQC,IAAI,uBAAwBwC,EAAMC,OAAOjB,OAEjD,IAAIkB,EAAWF,EAAMC,OAAOjB,MAE5BlC,EAAKyC,SAAS,CACZY,YAAaD,IAIfpD,EAAKsD,cAAcF,IA/GHpD,EAoHlBsD,cAAgB,SAACF,GACf3C,QAAQC,IAAI,oBAEZ0B,IAAMC,IAAN,kCAAAb,OAA4C4B,IACzCd,KAAK,SAACC,GACL9B,QAAQC,IAAI6B,EAASC,MAErBxC,EAAKyC,SAAS,CACZc,WAAYhB,EAASC,OAIvBxC,EAAKwD,WAGJxD,EAAKyD,8BAEPb,MAAM,SAACC,GACNpC,QAAQC,IAAI,qCAAsCmC,GAClDC,MAAM,qCAAsCD,MAvIhC7C,EA4IlBwD,SAAW,WAET,IAAIJ,EAAWpD,EAAKgD,MAAMK,YAEtBK,EAAe1D,EAAKgD,MAAMO,WAAW,GAAGI,MAE5ClD,QAAQC,IAAI,cAAe0C,EAAUM,GAErCtB,IAAMC,IAAN,6BAAAb,OAAuC4B,EAAvC,KAAA5B,OAAmDkC,IAChDpB,KAAK,SAACC,GACL9B,QAAQC,IAAI6B,EAASC,MAErBxC,EAAKyC,SAAS,CACZmB,MAAOrB,EAASC,OAIlBxC,EAAK6D,yBAGNjB,MAAM,SAACC,GACNpC,QAAQC,IAAI,8CAA+CmC,GAC3DC,MAAM,8CAA+CD,MAlKzC7C,EAwKlByD,0BAA4B,WAE1B,IAAIK,EAAgB9D,EAAKgD,MAAMO,WAE/B9C,QAAQC,IAAI,+BAAgCoD,GAE5C,IAAIC,EAAoBnD,SAASC,eAAe,qBAGhDb,EAAKO,aAAa,qBAGlBP,EAAK4B,iBAAiB,oBAAqBkC,EAAe,QAAS,QAGnEC,EAAkBrC,UAAW,GAvLb1B,EA4LlBgE,sBAAwB,SAACd,GACvBzC,QAAQC,IAAI,2BAA4BwC,EAAMC,OAAOjB,OAErD,IAAI+B,EAAkBf,EAAMC,OAAOjB,MAEnClC,EAAKyC,SAAS,CACZwB,gBAAiBA,KAlMHjE,EAwMlB6D,qBAAuB,WAErB,IAAIK,EAAWlE,EAAKgD,MAAMY,MAE1BnD,QAAQC,IAAI,0BAA2BwD,GAGvClE,EAAKO,aAAa,gBAGlBP,EAAK4B,iBAAiB,eAAgBsC,EAAU,QAAS,QAEtCtD,SAASC,eAAe,gBAG9Ba,UAAW,GAvNR1B,EA2NlBmE,iBAAmB,SAACjB,GAClBzC,QAAQC,IAAI,sBAAuBwC,EAAMC,OAAOjB,OAEhD,IAAIkC,EAAalB,EAAMC,OAAOjB,MAE9BlC,EAAKyC,SAAS,CACZ2B,WAAYA,KAjOEpE,EAuOlBqE,aAAe,SAACnB,GACdA,EAAMoB,iBAEN7D,QAAQC,IAAI,kBAAmBV,EAAKgD,OAEpC,IAAIK,EAAerD,EAAKgD,MAAMK,YAC1BY,EAAkBjE,EAAKgD,MAAMiB,gBAC7BG,EAAapE,EAAKgD,MAAMoB,WAGV,IAAff,GAAwC,IAAnBY,GAAuC,IAAdG,EAC/ChC,IAAMC,IAAN,4BAAAb,OAAsC6B,EAAtC,KAAA7B,OAAqDyC,EAArD,KAAAzC,OAAwE4C,IACrE9B,KAAK,SAACC,GACL9B,QAAQC,IAAI6B,EAASC,MAErBxC,EAAKuE,eAAehC,EAASC,QAG9BI,MAAM,SAACC,GACNpC,QAAQC,IAAI,0CAA2CmC,GACvDC,MAAM,0CAA2CD,MAKrDpC,QAAQC,IAAI,8CACZoC,MAAM,8CAjQQ9C,EAuQlBuE,eAAiB,SAAC/B,GAChB/B,QAAQC,IAAI,qBAEZ,IAAI8D,EAAkB5D,SAASC,eAAe,YAK9C,GAFA2D,EAAgBjD,UAAY,GAER,IAAhBiB,EAAKxB,OACPP,QAAQC,IAAI,0BACZ8D,EAAgBjD,UAAY,8BAEzB,GAAGiB,EAAKxB,OAAS,EAAE,CACtB,IAEIyD,EAFAC,EAAelC,EAAK,GAIrBkC,EAAaC,QACoB,QAA/BD,EAAaE,eACdnE,QAAQC,IAAI,cACZ+D,EAAO,cAGPA,EAAOC,EAAaE,cAAcC,QAAQ,MAAO,WAGnDL,EAAgBjD,UAAYkD,IAI5BK,IAAOC,sBAAsB,IAAK,IAKlCN,GAHAA,EAAOK,IAAOJ,EAAaM,eAAeC,WAG9BC,UAAU,EAAGT,EAAKzD,QAE9BwD,EAAgBjD,UAAYkD,KAzShCzE,EAAKgD,MAAQ,CACXN,OAAQ,GACRkB,MAAO,GACPL,WAAY,GACZF,YAAa,GACbe,WAAY,GACZH,gBAAiB,GACjBQ,KAAM,IAVQzE,mFAehBG,KAAKgC,mDAmSL,OACEgD,EAAAC,EAAAhE,cAAA,OAAKiE,UAAU,OACbF,EAAAC,EAAAhE,cAAA,UAAQiE,UAAU,cAChBF,EAAAC,EAAAhE,cAAA,qCAEF+D,EAAAC,EAAAhE,cAAA,OAAKiE,UAAU,kBACbF,EAAAC,EAAAhE,cAAA,QAAMkE,SAAUnF,KAAKkE,cAEnBc,EAAAC,EAAAhE,cAAA,SAAOmE,QAAQ,kBAAf,UACAJ,EAAAC,EAAAhE,cAAA,UAAQoE,aAAa,SAASC,GAAG,gBAAgBC,SAAUvF,KAAK8C,mBAC9DkC,EAAAC,EAAAhE,cAAA,UAAQM,UAAQ,EAACQ,MAAM,UAAvB,iBAGFiD,EAAAC,EAAAhE,cAAA,SAAOmE,QAAQ,iBAAf,SACAJ,EAAAC,EAAAhE,cAAA,UAAQoE,aAAa,SAASC,GAAG,eAAeC,SAAUvF,KAAKgE,kBAC7DgB,EAAAC,EAAAhE,cAAA,UAAQM,UAAQ,EAACQ,MAAM,UAAvB,gBAGFiD,EAAAC,EAAAhE,cAAA,SAAOmE,QAAQ,sBAAf,aACAJ,EAAAC,EAAAhE,cAAA,UAAQoE,aAAa,SAASC,GAAG,oBAAoBC,SAAUvF,KAAK6D,uBAClEmB,EAAAC,EAAAhE,cAAA,UAAQM,UAAQ,EAACQ,MAAM,UAAvB,qBAEFiD,EAAAC,EAAAhE,cAAA,0BAGJ+D,EAAAC,EAAAhE,cAAA,OAAKiE,UAAU,mBACbF,EAAAC,EAAAhE,cAAA,6BAAoB+D,EAAAC,EAAAhE,cAAA,KAAGqE,GAAG,uBA9UlBE,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAhE,cAAC+E,EAAD,MAASvF,SAASC,eAAe,SD2H3C,kBAAmBuF,WACrBA,UAAUC,cAAcC,MAAMhE,KAAK,SAAAiE,GACjCA,EAAaC","file":"static/js/main.91c581b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      routes: '',\n      stops: '',\n      directions: '',\n      chosenRoute: '',\n      chosenStop: '',\n      chosenDirection: '',\n      time: ''\n    }\n  }\n\n  componentDidMount() {\n    this.getTodaysRoutes();\n  }\n\n  //function to clear options\n  clearOptions = (elementId) => {\n    console.log('in clearOptions', elementId);\n\n    let targetElement = document.getElementById(elementId);\n\n    let optionArr = targetElement.getElementsByTagName('option');\n\n    if (optionArr.length > 1) {\n      for (let i = optionArr.length - 1; i >= 0; i--) {\n        targetElement.remove(optionArr[i]);\n      }\n\n      let chooseOne = document.createElement('option');\n      let innerString = elementId.split('D')[0];\n      \n      chooseOne.innerHTML = `Choose ${innerString}`;\n      chooseOne.selected = true;\n      chooseOne.disabled = true;\n\n      targetElement.appendChild(chooseOne);\n    }\n\n  }//end clearOptions\n\n  //function to populate dropdown\n  populateDropDown = (elementId, optionArr, targetVal, targetText) => {\n    console.log('in populateDropDown', elementId, optionArr, targetVal, targetText);\n\n    let targetElement = document.getElementById(elementId);\n\n    if (optionArr.length > 0) {\n\n      optionArr.forEach((item) => {\n        let newOption = document.createElement('option');\n\n        newOption.innerHTML = item[targetText];\n        newOption.value = item[targetVal];\n\n        targetElement.appendChild(newOption);\n      });\n    }\n  }//end populateDropDown\n\n  //function to get todays transit routes\n  getTodaysRoutes = () => {\n    console.log('in getTodaysRoutes');\n\n    //disable direction dropdown\n    document.getElementById('directionDropDown').disabled = true;\n\n    //disble stop dropdown\n    document.getElementById('stopDropDown').disabled = true;\n\n    axios.get('/api/nextStopRouter')\n      .then((response) => {\n        console.log(response.data);\n\n        this.setState({\n          routes: response.data,\n        });\n\n        // call function to populate routes drop down\n        this.populateRouteDropDown();\n      })\n      .catch((error) => {\n        console.log('error getting todays routes', error);\n        alert('error getting todays routes', error);\n      });\n  }//end getTodaysRoutes\n\n  //function to populate Route dropdown\n  populateRouteDropDown = () => {\n\n    let routesArr = this.state.routes;\n\n    console.log('in populateRouteDropDown', routesArr);\n   \n    this.populateDropDown('routeDropDown', routesArr, 'Route', 'Description');\n\n}// end populateRouteDropDown\n\n  //function to handle selection or route\n  handleRouteChange = (event) => {\n    console.log('in handleRouteChange', event.target.value);\n\n    let routeNum = event.target.value;\n\n    this.setState({\n      chosenRoute: routeNum,\n    });\n\n    //call function to get directions\n    this.getDirections(routeNum);\n    \n  }//end handleRouteChange\n\n  //function to get directions available for route\n  getDirections = (routeNum) => {\n    console.log('in getDirections');\n\n    axios.get(`/api/nextStopRouter/directions/${routeNum}`)\n      .then((response) => {\n        console.log(response.data);\n\n        this.setState({\n          directions: response.data,\n        });\n\n        //call function to get stops\n        this.getStops();\n\n        // //call function to populate direction drop down\n         this.populateDirectionDropDown();\n      })\n      .catch((error) => {\n        console.log('error getting directions for route', error);\n        alert('error getting directions for route', error);\n      });\n  } //end getDirections\n\n  //function to get stops available for route\n  getStops = () => {\n    \n    let routeNum = this.state.chosenRoute;\n\n    let directionNum = this.state.directions[0].Value;\n\n    console.log('in getStops', routeNum, directionNum);\n\n    axios.get(`/api/nextStopRouter/stops/${routeNum}/${directionNum}`)\n      .then((response) => {\n        console.log(response.data)\n\n        this.setState({\n          stops: response.data,\n        });\n\n        //call function to populate stop drop down\n        this.populateStopDropDown();\n\n      })\n      .catch((error) => {\n        console.log('error getting stops for route and direction', error);\n        alert('error getting stops for route and direction', error);\n      });\n\n  }//end getStops\n\n  //function to populate direction drop down\n  populateDirectionDropDown = () => {\n    \n    let directionsArr = this.state.directions;\n\n    console.log('in populateDirectionDropDown', directionsArr);\n\n    let directionDropDown = document.getElementById('directionDropDown');\n\n    //clear previous options\n    this.clearOptions('directionDropDown');\n\n    //call fucntion to populate drop down\n    this.populateDropDown('directionDropDown', directionsArr, 'Value', 'Text');\n    \n    //enable directionDropDown\n    directionDropDown.disabled = false;\n\n  }//end populateDirectionDropDown\n\n  //function to handle selection of direction\n  handleDirectionChange = (event) => {\n    console.log('in handleDirectionChange', event.target.value);\n\n    let chosenDirection = event.target.value;\n\n    this.setState({\n      chosenDirection: chosenDirection,\n    });\n\n  }//end handleDirectonChange\n\n  //function to populate stops dropdown\n  populateStopDropDown = () => {\n\n    let stopsArr = this.state.stops;\n\n    console.log('in populateStopDropDown', stopsArr);\n\n    //clear previous options\n    this.clearOptions('stopDropDown');\n\n    //call function to populate drop down\n    this.populateDropDown('stopDropDown', stopsArr, 'Value', 'Text');\n\n    let stopDropDown = document.getElementById('stopDropDown');\n\n    //enable stop dropdown\n    stopDropDown.disabled = false;\n  }//end populateStopDropDown\n\n  //function to handle selection of stop\n  handleStopChange = (event) => {\n    console.log('in handleStopChange', event.target.value);\n\n    let chosenStop = event.target.value;\n\n    this.setState({\n      chosenStop: chosenStop,\n    });\n\n  }//end handleStopChange\n\n  //functionto handle form submission\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    console.log('in handleSubmit', this.state);\n\n    let chosenRoute =  this.state.chosenRoute;\n    let chosenDirection = this.state.chosenDirection;\n    let chosenStop = this.state.chosenStop;\n\n    //make sure user has chosen all needed parameters\n    if(chosenRoute != '' && chosenDirection != '' && chosenStop != ''){\n      axios.get(`/api/nextStopRouter/time/${chosenRoute}/${chosenDirection}/${chosenStop}`)\n        .then((response) => {\n          console.log(response.data);\n\n          this.handleResponse(response.data);\n\n        })\n        .catch((error) => {\n          console.log('error getting time until next bus/train', error);\n          alert('error getting time until next bus/train', error);\n        });\n\n    }\n    else{\n      console.log('please choose a route, stop, and direction');\n      alert('please choose a route stop and direction');\n    }\n    \n  }//end handleSubmit\n\n  //function to handle response for getting next time of bus/train\n  handleResponse = (data) => {\n    console.log('in handleResponse');\n\n    let responseDisplay = document.getElementById('nextTime');\n\n    //clear responseDisplay\n    responseDisplay.innerHTML = '';\n\n    if (data.length === 0) { //if no response\n      console.log('No bus or Train coming');\n      responseDisplay.innerHTML = 'No bus or train coming';\n    }\n    else if(data.length > 0){\n      let nextBusTrain = data[0];\n\n      let time;\n\n      if(nextBusTrain.Actual){\n        if(nextBusTrain.DepartureText === 'Due'){\n          console.log('Any minute');\n          time = 'Any minute';\n        }\n        else{\n          time = nextBusTrain.DepartureText.replace('Min', 'minutes');\n        }\n\n        responseDisplay.innerHTML = time;\n      }\n      else{\n        //round time to minutes\n        moment.relativeTimeThreshold('m', 60);\n        \n        time = moment(nextBusTrain.DepartureTime).fromNow();\n        \n        //remove beginning of string e.g. \"in\"\n        time = time.substring(3, time.length);\n        \n        responseDisplay.innerHTML = time;\n      }\n    }\n  }//end handleResponse\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Next Stop Time Checker</h1>\n        </header>\n        <div className=\"form-container\">\n          <form onSubmit={this.handleSubmit}>\n            {/* dropdown to be populated with routes on componentDidMount */}\n            <label htmlFor=\"#routeDropDown\">Routes</label>\n            <select defaultValue=\"choose\" id=\"routeDropDown\" onChange={this.handleRouteChange}>\n              <option disabled value=\"choose\">Choose route</option>\n            </select>\n            {/* dropdown to be populated with stops when route is selected */}\n            <label htmlFor=\"#stopDropDown\" >Stops</label>\n            <select defaultValue=\"choose\" id=\"stopDropDown\" onChange={this.handleStopChange}>\n              <option disabled value=\"choose\">Choose stop</option>\n            </select>\n            {/* dropdown to be populated and enabled when route is selected */}\n            <label htmlFor=\"#directionDropDown\">Direction</label>\n            <select defaultValue=\"choose\" id=\"directionDropDown\" onChange={this.handleDirectionChange}>\n              <option disabled value=\"choose\">Choose direction</option>\n            </select>\n            <button>Submit</button>\n          </form>\n        </div>\n        <div className=\"resultContainer\">\n          <h3>Next Bus/Train: <p id=\"nextTime\"></p></h3>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}